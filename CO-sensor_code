#include <SoftwareSerial.h>

// Define the WiFi settings
const char* ssid = "Sensor";
const char* password = "Sensor_ESP8266_1";

// Define the server settings
const char* serverName = "yourserver.com";
const int serverPort = 80;
const String serverPath = "/senddata.php";

// Define the CO sensor pin
const int coSensorPin = A0;

// Define the LED and buzzer pins
const int ledPin = 2;
const int buzzerPin = 3;

// Define the Kalman filter variables
const float R = 4; // Measurement noise variance
const float Q = 0.0001; // Process noise variance
float x = 0; // State estimate
float P = 1; // State error covariance

// Define the CO concentration thresholds
const int coThreshold1 = 9; // ppm
const int coThreshold2 = 25; // ppm
const int coThreshold1Time = 8; // hours
const int coThreshold2Time = 1; // hour
unsigned long coThreshold1StartTime = 0;
unsigned long coThreshold2StartTime = 0;

// Define the variables for storing the previous CO concentration and time
float previousCo = 0;
unsigned long previousTime = 0;

// Define the software serial object for the ESP8266
SoftwareSerial esp8266(5, 6);

void setup() {
  // Initialize the serial port for debugging
  Serial.begin(9600);

  // Initialize the LED and buzzer pins
  pinMode(ledPin, OUTPUT);
  pinMode(buzzerPin, OUTPUT);

  // Initialize the software serial object for the ESP8266
  esp8266.begin(9600);

  // Connect to the WiFi network
  connectToWiFi();
}

void loop() {
  // Read the CO concentration
  float co = readCO();

  // Apply the Kalman filter to the CO measurement
  kalmanFilter(co);

  // Send the CO concentration to the server
  sendData(co);

  // Check if the CO concentration has exceeded the threshold for 8 hours
  if (co >= coThreshold1) {
    if (coThreshold1StartTime == 0) {
      coThreshold1StartTime = millis();
    }
    else if (millis() - coThreshold1StartTime >= coThreshold1Time * 3600000UL) {
      triggerAlarm();
      sendAlarmData(co);
      coThreshold1StartTime = 0;
    }
  }
  else {
    coThreshold1StartTime = 0;
  }

  // Check if the CO concentration has exceeded the threshold for 1 hour
  if (co >= coThreshold2) {
    if (coThreshold2StartTime == 0) {
      coThreshold2StartTime = millis();
    }
    else if (millis() - coThreshold2StartTime >= coThreshold2Time * 3600000UL) {
      triggerAlarm();
      sendAlarmData(co);
      coThreshold2StartTime = 0;
    }
  }
  else {
    coThreshold2StartTime = 0;
  }

  // Store the current CO concentration and time for the next loop iteration
  previousCo = co;
  previousTime = millis();
}

void connectToWiFi() {
  // Connect to the WiFi network
  WiFi.begin(ssid, password);

  // Wait for the connection to be established
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }

  // Print the local
